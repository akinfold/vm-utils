#!/bin/bash

#
# Check that script runing under root priveleges
#
if [[ $(id -u) -ne 0 ]]; then 
    echo "Please run as root"
    exit 1
fi

#
# Check or create stages status file
# 
STATUS_FILE="$HOME/.vm-utils-initial-setup-stages"
STATUS_DONE="done"
STATUS_FAILED="failed"

function commit_stage_status {
    if [[ $# -eq 2 ]]; then
        if [[ ! -f $STATUS_FILE ]]; then
            echo "Status file not found in $STATUS_FILE. Create new one."
            touch $STATUS_FILE
            echo "# This file auto generated by init script https://github.com/akinfold/vm-utils/blob/main/initial-setup.sh" > $STATUS_FILE
        fi
        sed -i "/^$1=.*/d" $STATUS_FILE
        if [[ -n $2 ]]; then
            echo "$1=$2" >> $STATUS_FILE
        fi
    else
        echo "Usage: commit_stage_status STAGE_NAME STATUS"
        exit 1
    fi
}

function commit_stage_done {
    if [[ $# -eq 1 ]]; then
        commit_stage_status $1 $STATUS_DONE
    else
        echo "Usage: commit_stage_done STAGE_NAME"
        exit 1
    fi
}

function commit_stage_failed {
    if [[ $# -eq 1 ]]; then
        commit_stage_status $1 $STATUS_FAILED
    else
        echo "Usage: commit_stage_failed STAGE_NAME"
        exit 1
    fi
}

function reset_stage_status {
    if [[ $# -eq 1 ]]; then
        commit_stage_status $1 ""
    else
        echo "Usage: reset_stage_status STAGE_NAME"
        exit 1
    fi
}

function read_stage_status {
    if [ $# -eq 1 ]; then
        echo "$( cat $STATUS_FILE | grep $1 | tail -n1 | cut -d "=" -f 2 | sed -e 's/^"//' -e 's/"$//' -e 's/^\s*//' -e 's/\s*$//' )"
    else
        echo "Usage: read_stage_status STAGE_NAME"
        exit 1
    fi
}

function check_stage_done {
    if [[ $# -eq 1 ]]; then
        [[ $(read_stage_status $1) == $STATUS_DONE ]]
    else
        echo "Usage: check_stage_done STAGE_NAME"
        exit 1
    fi
}

STAGE_NAME='create_stages_status_file'
commit_stage_done $STAGE_NAME


# 
# Update packages
# 
APT_GET_UPDATE_LAST_TS=$( stat --format="%X" /var/cache/apt/pkgcache.bin )
NOW_TS=$( date +%s )
if [[ $(( UNIX_TIME - LAST_UPDATED )) -gt 86400 ]]; then
    echo "Updating packages."
    apt-get -qq update
    STATUS=$?
    if [ $STATUS -eq 0 ];then
        echo "Packages updated."
    else
        echo "Could not update packages. Continue with old packages."
    fi
fi


# 
# Change root password
# 
STAGE_NAME="change_root_password"
if ! check_stage_done $STAGE_NAME; then

    if [ $(dpkg -l | grep pwgen | wc -l) -lt 1 ]; then 
        apt-get install pwgen
    fi

    NEW_ROOT_PASSWORD=$(pwgen -1BC 16 1)

    echo "Changing root password to: \"$NEW_ROOT_PASSWORD\"."

    echo "root:$NEW_ROOT_PASSWORD" | sudo chpasswd
    STATUS=$?
    if [ $STATUS -eq 0 ];then
        echo "Root password changed to: \"$NEW_ROOT_PASSWORD\"."
        commit_stage_done $STAGE_NAME
    else
        echo "Could not chpasswd."
        exit 1
    fi
fi


# 
# Enable UFW
# 
if ufw status | grep 'Status: inactive'; then
    # Allow 22 port before enable UFW.
    STAGE_NAME="close_22_port"
    reset_stage_status $STAGE_NAME
    ufw allow ssh
    # Enable UFW.
    ufw --force enable
    STATUS=$?
    if [ $STATUS -eq 0 ];then
        echo "UFW enabled. User \`ufw status\` or \`ufw show added\` to check added rules."
    else
        echo "Unable to enable UFW."
        exit 1
    fi
fi


# 
# Change SSH port
# Sources:
#   * https://serverfault.com/questions/1159599/how-to-change-the-ssh-server-port-on-ubuntu
#   * https://raw.githubusercontent.com/fcoulloudon/ssh_custom_port/refs/heads/main/script.sh
# 
STAGE_NAME="change_ssh_port"
if ! check_stage_done $STAGE_NAME; then
    if systemctl status ssh.socket | grep 'Listen:' | grep -e ':22 ' -e ':2222 '; then
        NEW_SSH_PORT=$((1024 + $RANDOM))

        echo "Opening new SSH port $NEW_SSH_PORT in UFW."
        ufw allow $NEW_SSH_PORT/tcp
        echo "Port $NEW_SSH_PORT has opened in UFW."

        echo "Changing SSH port to $NEW_SSH_PORT"

        # Define the override directory and file
        OVERRIDE_DIR="/etc/systemd/system/ssh.socket.d"
        OVERRIDE_FILE="$OVERRIDE_DIR/override.conf"

        # Create the override directory if it doesn't exist
        if [ ! -d "$OVERRIDE_DIR" ]; then
            echo "Creating directory: $OVERRIDE_DIR"
            mkdir -p "$OVERRIDE_DIR"
        fi

        # Write the override configuration
        cat <<EOF > "$OVERRIDE_FILE"
[Socket]
ListenStream=
ListenStream=$NEW_SSH_PORT
EOF

        echo "SSH configuration written to $OVERRIDE_FILE"

        # Modify the SSH server configuration file
        SSHD_CONFIG="/etc/ssh/sshd_config"
        if grep -q "^Port " "$SSHD_CONFIG"; then
            sed -i "s/^Port .*/Port $NEW_SSH_PORT/" "$SSHD_CONFIG"
        else
            echo "Port $NEW_SSH_PORT" >> "$SSHD_CONFIG"
        fi

        echo "SSH server configuration updated in $SSHD_CONFIG"

        # Reload systemd to apply changes
        systemctl daemon-reload
        # Restart the SSH socket
        systemctl restart ssh.socket

        # Restart the SSH service
        systemctl restart ssh.service

        echo "SSH port has been changed to $NEW_SSH_PORT. Verify by running: systemctl status ssh.socket and systemctl status ssh.service"
    fi
    commit_stage_done $STAGE_NAME
fi


#
# Close 22 port in UFW.
#
STAGE_NAME="close_22_port"
echo "Now old SSH port will be denied in UFW. Reconnect to new port $NEW_SSH_PORT."
ufw deny ssh
commit_stage_done $STAGE_NAME


# 
# Print final configuration
# 
if [[ -n $NEW_ROOT_PASSWORD ]]; then
    echo "New root password: $NEW_ROOT_PASSWORD"
fi
if [[ -n $NEW_SSH_PORT ]]; then
    echo "New SSH port: $NEW_SSH_PORT"
fi


