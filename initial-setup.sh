#!/bin/bash

#
# Check that script runing under root priveleges
#
if [ $(id -u) -ne 0 ]
    then echo "Please run as root"
    exit
fi

#
# Check or create stages status file
# 
STATUS_FILE="$HOME/.vm-utils-initial-setup-stages"
STATUS_DONE="done"
STATUS_FAILED="failed"

function commit_stage_status {
    if [ $# -eq 2 ]; then
        if [ ! -f $STATUS_FILE ]; then
            echo "Status file not found in $STATUS_FILE. Create new one."
            touch $STATUS_FILE
            echo "# This file auto generated by init script https://github.com/akinfold/vm-utils/blob/main/initial-setup.sh" > $STATUS_FILE
        fi
        sed -i "/^$1=.*/d" $STATUS_FILE
        echo "$1=$2" >> $STATUS_FILE
    else
        echo "Usage: commit_stage_status STAGE_NAME STATUS"
        exit 1
    fi
}

function commit_stage_done {
    if [ $# -eq 1 ]; then
        commit_stage_status $1 $STATUS_DONE
    else
        echo "Usage: commit_stage_done STAGE_NAME"
        exit 1
    fi
}

function commit_stage_failed {
    if [ $# -eq 1 ]; then
        commit_stage_status $1 $STATUS_FAILED
    else
        echo "Usage: commit_stage_done STAGE_NAME"
        exit 1
    fi
}

function read_stage_status {
    if [ $# -eq 1 ]; then
        echo $( cat $STATUS_FILE | grep $1 | tail -n1 | cut -d "=" -f 2 | sed -e 's/^"//' -e 's/"$//' -e 's/^\s*//' -e 's/\s*$//' )
        return
    else
        echo "Usage: read_stage_status STAGE_NAME"
        exit 1
    fi
}

function check_stage_done {
    if [ $# -eq 1 ]; then
        [[ "$(read_stage_status $1)" == $STATUS_DONE ]]
        return
    else
        echo "Usage: check_stage_done STAGE_NAME"
        exit 1
    fi
}

STAGE_NAME='create_stages_status_file'
commit_stage_done $STAGE_NAME

exit 0

# 
# Update packages
# 
apt-get update


# 
# Change root password
# 
STAGE_NAME="CHANGE_ROOT_PASSWORD_STAGE"
if [ ! check_stage_done $STAGE_NAME ]; then
    if [ $(dpkg -l | grep pwgen | wc -l) == 2 ]; then 
        apt-get install pwgen
    fi

    NEW_ROOT_PASSWORD=$(pwgen -1BC 16 1)

    echo "Changing root password to $NEW_ROOT_PASSWORD"
    echo "root:$NEW_ROOT_PASSWORD" | sudo chpasswd
    if [ $? -eq 0 ];then
        echo "Root password changed."
    else
        echo "Could not chpasswd." >&2
        exit 1
    fi
fi


# 
# Enable UFW
# 
ufw allow ssh
ufw --force enable

# 
# Change SSH port
# Sources:
#   * https://serverfault.com/questions/1159599/how-to-change-the-ssh-server-port-on-ubuntu
#   * https://raw.githubusercontent.com/fcoulloudon/ssh_custom_port/refs/heads/main/script.sh
# 
NEW_SSH_PORT=$((1024 + $RANDOM))

echo "Opening new SSH port $NEW_SSH_PORT in UFW."
ufw allow $NEW_SSH_PORT/tcp
echo "Port $NEW_SSH_PORT has opened in UFW."

echo "Changing SSH port to $NEW_SSH_PORT"

# Define the override directory and file
OVERRIDE_DIR="/etc/systemd/system/ssh.socket.d"
OVERRIDE_FILE="$OVERRIDE_DIR/override.conf"

# Create the override directory if it doesn't exist
if [ ! -d "$OVERRIDE_DIR" ]; then
    echo "Creating directory: $OVERRIDE_DIR"
    mkdir -p "$OVERRIDE_DIR"
fi

# Write the override configuration
cat <<EOF > "$OVERRIDE_FILE"
[Socket]
ListenStream=
ListenStream=$NEW_SSH_PORT
EOF

echo "Configuration written to $OVERRIDE_FILE"

# Modify the SSH server configuration file
SSHD_CONFIG="/etc/ssh/sshd_config"
if grep -q "^Port " "$SSHD_CONFIG"; then
    sed -i "s/^Port .*/Port $NEW_SSH_PORT/" "$SSHD_CONFIG"
else
    echo "Port $NEW_SSH_PORT" >> "$SSHD_CONFIG"
fi

echo "SSH server configuration updated in $SSHD_CONFIG"

# Reload systemd to apply changes
systemctl daemon-reload
# Restart the SSH socket
systemctl restart ssh.socket

# Restart the SSH service
systemctl restart ssh.service

echo "SSH port has been changed to $NEW_SSH_PORT. Verify by running: systemctl status ssh.socket and systemctl status ssh.service"


# 
# Print final configuration
# 

echo "New root password: $NEW_ROOT_PASSWORD"
echo "New SSH port: $NEW_SSH_PORT"

#
# Close 22 port in UFW.
#
echo "Now old SSH port will be denied in UFW. Connection will be lost. Reconnect to new port."
ufw deny ssh